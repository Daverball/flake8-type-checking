name: test

on:
  pull_request:
  push:
    branches:
      - master

jobs:
  linting:
    runs-on: ubuntu-latest
    steps:
      - uses: snok/.github/workflows/linting@main
  get-python-versions:
    runs-on: ubuntu-latest
    outputs:
      python-matrix: ${{ steps.export-python-versions.outputs.python-versions }}
    steps:
      # Set cache key based on week number, so cache expires once a week
      - id: set-cache-key
        run: |
          week_number=$(date +%V)
          echo "::set-output name=cache-key::$week_number"

      # Try to load cached versions by week number
      - name: Load cached versions
        uses: actions/cache@v2
        id: cache-versions
        with:
          path: .python-versions-file
          key: ${{ steps.set-cache-key.outputs.cache-key }}

      # Fetch new versions if no cache was found
      # TODO: Update to v1 when v1 is released
      - uses: snok/latest-python-versions@v0.1.1
        if: steps.cache-versions.outputs.cache-hit != 'true'
        id: get-python-versions
        with:
          min-version: 3.8
          include-prereleases: true

      # Save results to file if no cache was found
      - name: Create new versions file
        run: echo "${{ steps.get-python-versions.outputs.latest-python-versions }}" > .python-versions-file
        if: steps.cache-versions.outputs.cache-hit != 'true'

      # Load file contents and export values
      - name: Export versions file values
        id: export-python-versions
        run: |
          versions=$(cat .python-versions-file)
          echo "::set-output name=python-versions::$versions"
  test:
    needs: [linting, get-python-versions]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ${{fromJson(needs.get-python-versions.outputs.python-matrix)}}
        flake8-version: [ "3" ]
    steps:
      - name: Check out repository
        uses: actions/checkout@v2
      - name: Set up python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Load cached Poetry installation
        uses: actions/cache@v2
        with:
          # This path assumes the workflow is run on an ubuntu runner
          path: ~/.local
          key: key-1
      - name: Install Poetry
        uses: snok/install-poetry@v1.2.0-rc1
        with:
          virtualenvs-in-project: true
      - name: Load cached venv
        uses: actions/cache@v2
        id: cache-venv
        with:
          path: .venv
          key: ${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}-4
      - name: Install dependencies
        run: poetry install --no-interaction --no-root
        if: steps.cache-venv.outputs.cache-hit != 'true'
      - run: pip install flake8==${{ matrix.flake8-version }}
      - name: Install package
        run: poetry install --no-interaction
      - name: Run tests
        run: |
          source .venv/bin/activate
          poetry run pytest --cov=flake8_type_checking --verbose --assert=plain
          poetry run coverage report
